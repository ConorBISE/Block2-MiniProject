package com.cd.quizwhiz.server.auth;

import java.math.BigInteger;
import java.security.KeyFactory;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.RSAPrivateKeySpec;
import java.security.spec.RSAPublicKeySpec;

import com.auth0.jwt.algorithms.Algorithm;

public class KeyManagement {
    public static RSAPublicKey getPublicKey() {
        try {
            KeyFactory kf = KeyFactory.getInstance("RSA");
            RSAPublicKeySpec keySpec = new RSAPublicKeySpec(new BigInteger("C69884C36BC1741595D5D567E7F4143FD054697AF45BAE057008B908F11C442EA8406696589EDF16273718E0B87CF26007D49905581EB2CF18BDD58337E946764A37A643950200C866D63FE7339FC32922A43BD79AD4DFCC98B772FA60212A4310CF8AB9D73FDE95931662857FAC7669130709A6AEC0EC8339B2F4F967B61C7A563A9A4B370C3F1485C3ACB5171B75BB791283EF7D0CA1E7C626BECC9854D7085C6782A503D0C9A916C4054AF681D7BAF2B0E7C74EF8C2D9056D86CEFF7B44040C0D53DC15F24FEA027BC713CA555FF408EEFA64EF8072E7C9C2AA39A5543E5706BBC8374CD519534DFCF461FACB4C6CEFAF49543F10C746D3CC7BA5AB78328F", 16), new BigInteger("010001", 16));
            return (RSAPublicKey) kf.generatePublic(keySpec);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static RSAPrivateKey getPrivateKey() {
        try {
            KeyFactory kf = KeyFactory.getInstance("RSA");
            RSAPrivateKeySpec keySpec = new RSAPrivateKeySpec(new BigInteger("C69884C36BC1741595D5D567E7F4143FD054697AF45BAE057008B908F11C442EA8406696589EDF16273718E0B87CF26007D49905581EB2CF18BDD58337E946764A37A643950200C866D63FE7339FC32922A43BD79AD4DFCC98B772FA60212A4310CF8AB9D73FDE95931662857FAC7669130709A6AEC0EC8339B2F4F967B61C7A563A9A4B370C3F1485C3ACB5171B75BB791283EF7D0CA1E7C626BECC9854D7085C6782A503D0C9A916C4054AF681D7BAF2B0E7C74EF8C2D9056D86CEFF7B44040C0D53DC15F24FEA027BC713CA555FF408EEFA64EF8072E7C9C2AA39A5543E5706BBC8374CD519534DFCF461FACB4C6CEFAF49543F10C746D3CC7BA5AB78328F", 16), new BigInteger("5eea21f9ac146740b1bde322a7ef3586523125c087ed113cb410d72e78ddc3907105668250948d966ee39c563a962cd8cca5450512da89270572250b73bb5fdbc518d7b3d111860241740052a58fa39c935bdee5eaaff6ce37e6e562d872c15a103cc0d695138774013a5f97e22f30e0832187f14bf014999b07f6a1047a3b1d3d675cc96fe2ff2ed2c95aa3a0cbc90471995d6c74196afc187c52188243349fb9008045138ae6fe524e0bb2d02122813bc72b4f96c19bec8f1bcfca602277362aa35a5d63bbd26021fbe6f9219af1f6975dbc0d5e3b672965e00058e9b694ab39e2aaa98851d36d24e32f2b9998cbf9eee5e2aee4583b1b8fc822aa18cd62a1", 16));
            return (RSAPrivateKey) kf.generatePrivate(keySpec);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static Algorithm getAlgorithm() {
        return Algorithm.RSA256(getPublicKey(), getPrivateKey());
    }
}
